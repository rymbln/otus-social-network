version: "3.9"

services:

  otus-haproxy:
    container_name: "otus-haproxy"
    image: haproxy:latest
    restart: unless-stopped
    ports:
      - 5005:5005
      - 8404:8404
      - 15672:15672
      - 5672:5672
      - 1936:1936
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    networks:
      otus-network:
        aliases:
          - haproxy.local
    depends_on:
      - otus-rmq0
      - otus-rmq1
      - otus-rmq2

  otus-rmq0:
    build: rabbit
    container_name: "otus-rmq0"
    image: otus-rabbit
    restart: on-failure
    hostname: rmq0
    networks:
      otus-network:
        aliases:
          - rmq0.local
    ports:
      - 15682:15672
      - 5682:5672
    environment:
      # - RABBITMQ_DEFAULT_USER=rabbit
      # - RABBITMQ_DEFAULT_PASS=rabbit
      # - RABBITMQ_DEFAULT_VHOST=/
      - LOG=debug
    volumes:
      - ./volumes/rmq0-data:/var/lib/rabbitmq/mnesia
      - ./volumes/rmq0-log:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  otus-rmq1:
    build: rabbit
    container_name: "otus-rmq1"
    image: otus-rabbit
    restart: on-failure
    hostname: rmq1
    networks:
      otus-network:
        aliases:
          - rmq1.local
    environment:
      # - RABBITMQ_DEFAULT_USER=rabbit
      # - RABBITMQ_DEFAULT_PASS=rabbit
      # - RABBITMQ_DEFAULT_VHOST=/
      - LOG=debug
    volumes:
      - ./volumes/rmq1-data:/var/lib/rabbitmq/mnesia
      - ./volumes/rmq1-log:/var/log/rabbitmq
    depends_on:
      - otus-rmq0

  otus-rmq2:
    build: rabbit
    container_name: "otus-rmq2"
    image: otus-rabbit
    restart: on-failure
    hostname: rmq2
    networks:
      otus-network:
        aliases:
          - rmq2.local
    environment:
      # - RABBITMQ_DEFAULT_USER=rabbit
      # - RABBITMQ_DEFAULT_PASS=rabbit
      # - RABBITMQ_DEFAULT_VHOST=/
      - LOG=debug
    volumes:
      - ./volumes/rmq2-data:/var/lib/rabbitmq/mnesia
      - ./volumes/rmq2-log:/var/log/rabbitmq
    depends_on:
      - otus-rmq0

  otus-tarantool:
    image: tarantool/tarantool:2.11
    container_name: otus-tarantool
    restart: unless-stopped
    environment:
      TARANTOOL_USER_NAME: "user"
      TARANTOOL_USER_PASSWORD: "password"
    ports:
      - 3301:3301
    volumes:
      - ./volumes/tarantool/data:/var/lib/tarantool
      - ./tarantool:/usr/local/share/tarantool/init
    command: tarantool /usr/local/share/tarantool/init/init.lua
    networks:
      - otus-network

  otus-db:
    image: postgres:14
    container_name: otus-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: "otusdb"
      POSTGRES_USER: "dbuser"
      POSTGRES_PASSWORD: "dbpassword"
    mem_limit: 512m
    ports:
      - 5432:5432
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d # Инициализация таблиц
      - ./volumes/Database/data:/var/lib/postgresql/data # Папка, где postgres будет хранить данные
      - ./volumes/Database/backups:/backups # Папка для бекапов
    networks:
      - otus-network

  otus-api-1:
    image: otus-api-image
    build:
      context: ./webapi
      dockerfile: ./Dockerfile
    container_name: otus-api-1
    restart: always
    environment:
      # Основные настройки для работы API
      ServiceName: "Otus1"
      ASPNETCORE_URLS: "http://+:5001"
      AllowedHosts: "*" # Ограничивает хосты, которые могут подключаться к API. По умолчанию - все
      # Строка подключения к базе данных Postgres
      DatabaseSettings:ConnStr: "Host=otus-db;Port=5432;Username=dbuser;Password=dbpassword;Database=otusdb;Pooling=true;"
      # Подключение к tarantool
      TarantoolSettings:ConnStr: "operator:123123@otus-tarantool:3301"
      TarantoolSettings:Space: "posts"
      # Rabbit
      RabbitMqSettings:Uri: "rabbitmq://guest:guest@otus-haproxy:5672"
      RabbitMqSettings:Consumer: api1
      # Настройки генерации токена авторизации
      JWTSettings:Key: "verystrongkeyforauthtoken"
      JWTSettings:Issuer: otus.social.network
      JWTSettings:Audience: otus.social.network
      JWTSettings:DurationInMinutes: "60"
    user: "555:555"
    ports:
      - 5001:5001
    mem_limit: 1024m
    entrypoint: dotnet OtusSocialNetwork.dll
    depends_on:
      - otus-db
      - otus-tarantool
      - otus-haproxy
    networks:
      - otus-network

  otus-api-2:
    image: otus-api-image
    build:
      context: ./webapi
      dockerfile: ./Dockerfile
    container_name: otus-api-2
    restart: always
    environment:
      # Основные настройки для работы API
      ServiceName: "Otus2"
      ASPNETCORE_URLS: "http://+:5002"
      AllowedHosts: "*" # Ограничивает хосты, которые могут подключаться к API. По умолчанию - все
      # Строка подключения к базе данных Postgres
      DatabaseSettings:ConnStr: "Host=otus-db;Port=5432;Username=dbuser;Password=dbpassword;Database=otusdb;Pooling=true;"
      # Подключение к tarantool
      TarantoolSettings:ConnStr: "operator:123123@otus-tarantool:3301"
      TarantoolSettings:Space: "posts"
      # Rabbit
      RabbitMqSettings:Uri: "rabbitmq://guest:guest@otus-haproxy:5672"
      RabbitMqSettings:Consumer: api2
      # Настройки генерации токена авторизации
      JWTSettings:Key: "verystrongkeyforauthtoken"
      JWTSettings:Issuer: otus.social.network
      JWTSettings:Audience: otus.social.network
      JWTSettings:DurationInMinutes: "60"
    user: "555:555"
    ports:
      - 5002:5002
    mem_limit: 1024m
    entrypoint: dotnet OtusSocialNetwork.dll
    depends_on:
      - otus-db
      - otus-tarantool
      - otus-haproxy
    networks:
      - otus-network

  otus-api-3:
    image: otus-api-image
    build:
      context: ./webapi
      dockerfile: ./Dockerfile
    container_name: otus-api-3
    restart: always
    environment:
      # Основные настройки для работы API
      ServiceName: "Otus3"
      ASPNETCORE_URLS: "http://+:5003"
      AllowedHosts: "*" # Ограничивает хосты, которые могут подключаться к API. По умолчанию - все
      # Строка подключения к базе данных Postgres
      DatabaseSettings:ConnStr: "Host=otus-db;Port=5432;Username=dbuser;Password=dbpassword;Database=otusdb;Pooling=true;"
      # Подключение к tarantool
      TarantoolSettings:ConnStr: "operator:123123@otus-tarantool:3301"
      TarantoolSettings:Space: "posts"
      # Rabbit
      RabbitMqSettings:Uri: "rabbitmq://guest:guest@otus-haproxy:5672"
      RabbitMqSettings:Consumer: api3
      # Настройки генерации токена авторизации
      JWTSettings:Key: "verystrongkeyforauthtoken"
      JWTSettings:Issuer: otus.social.network
      JWTSettings:Audience: otus.social.network
      JWTSettings:DurationInMinutes: "60"
    user: "555:555"
    ports:
      - 5003:5003
    mem_limit: 1024m
    entrypoint: dotnet OtusSocialNetwork.dll
    depends_on:
      - otus-db
      - otus-tarantool
      - otus-haproxy
    networks:
      - otus-network

  otus-web:
    image: otus-web-image
    container_name: otus-web
    build:
      context: ./angular
      dockerfile: ./Dockerfile
    restart: always
    mem_limit: 256m
    ports:
      - 4200:80
    networks:
      - otus-network

networks:
  otus-network:
    name: otus-network
    driver: bridge